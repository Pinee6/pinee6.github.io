<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2024/07/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2024/07/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法</title>
    <link href="/2024/07/11/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2024/07/11/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>贪心算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法</title>
    <link href="/2024/07/11/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2024/07/11/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>回溯算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2024/07/11/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/07/11/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列</title>
    <link href="/2024/07/11/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <url>/2024/07/11/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>栈与队列</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2024/07/11/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/07/11/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2024/07/11/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2024/07/11/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="15-三数之和（中等）"><a href="#15-三数之和（中等）" class="headerlink" title="15. 三数之和（中等）"></a>15. 三数之和（中等）</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[-1,0,1,2,-1,-4]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[-1,-1,2]</span>,<span class="hljs-comment">[-1,0,1]</span>]</span><br>解释：<br>nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> + nums<span class="hljs-comment">[2]</span> = (-1) + 0 + 1 = 0 。<br>nums<span class="hljs-comment">[1]</span> + nums<span class="hljs-comment">[2]</span> + nums<span class="hljs-comment">[4]</span> = 0 + 1 + (-1) = 0 。<br>nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[3]</span> + nums<span class="hljs-comment">[4]</span> = (-1) + 2 + (-1) = 0 。<br>不同的三元组是 <span class="hljs-comment">[-1,0,1]</span> 和 <span class="hljs-comment">[-1,-1,2]</span> 。<br>注意，输出的顺序和三元组的顺序并不重要。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0,1,1]</span><br>输出：<span class="hljs-comment">[]</span><br>解释：唯一可能的三元组和不为 0 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：nums = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>输出：<span class="hljs-string">[[0,0,0]]</span><br>解释：唯一可能的三元组和为 <span class="hljs-number">0</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="解法一：哈希表法"><a href="#解法一：哈希表法" class="headerlink" title="解法一：哈希表法"></a>解法一：哈希表法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; result=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<span class="hljs-comment">//从小到大排序</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-comment">//如果第一个元素就大于0，那么不可能存在三个数相加为0的情况</span><br>            <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            <br>            <span class="hljs-comment">//a去重</span><br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; nums[i-<span class="hljs-number">1</span>]==nums[i])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            Set&lt;Integer&gt; set=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;nums.length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(j&gt;i+<span class="hljs-number">2</span>&amp;&amp;nums[j]==nums[j-<span class="hljs-number">1</span>]&amp;&amp;nums[j-<span class="hljs-number">1</span>]==nums[j-<span class="hljs-number">2</span>])&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>-(nums[i]+nums[j]);<br>                <span class="hljs-keyword">if</span>(set.contains(c))&#123;<br>                    result.add(Arrays.asList(nums[i],nums[j],c));<br>                    set.remove(c);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    set.add(nums[j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法二：双指针法"><a href="#解法二：双指针法" class="headerlink" title="解法二：双指针法"></a>解法二：双指针法</h4>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>哈希表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/07/11/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/07/11/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>链表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2024/07/11/%E6%95%B0%E7%BB%84/"/>
    <url>/2024/07/11/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2024/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>log n</p><p>nlog n</p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组内存空间的地址是连续的，所以数组的元素不能删除，只能覆盖；</p><p>C++中二维数组的内存空间是连续的，先第一行，其次第二行，·······依次</p><p>Java的二维数组不是连续的，Java不会暴露元素的地址，寻址由虚拟机做；Java的二维数组存储如下图，由链表组成。</p><img src="/2024/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.png" class=""><h2 id="题目思想"><a href="#题目思想" class="headerlink" title="题目思想"></a>题目思想</h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>移除元素、有序数组的平方</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>长度最小的子数组</p><h3 id="模拟行为"><a href="#模拟行为" class="headerlink" title="模拟行为"></a>模拟行为</h3><p>螺旋矩阵</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>单链表、双链表、循环链表</p><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>在内存中不连续，散乱分布，靠指针相连</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><img src="/2024/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.png" class=""><p>C++中？，如果不自定义构造函数，那么初始化节点时只能先new实例，再赋值；如果定义了构造函数，那么可以在初始化节点的时候就赋值。</p><h2 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h2><p>添加节点</p><p>删除节点</p><h2 id="链表和数组的比较"><a href="#链表和数组的比较" class="headerlink" title="链表和数组的比较"></a>链表和数组的比较</h2><p>链表适合<strong>增删</strong>，数组适合<strong>查询</strong></p><p>链表长度<strong>不固定</strong>，数组长度<strong>固定</strong></p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p><strong>哈希表解决什么问题</strong>：快速判断一个元素是否出现在集合里</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>不同的元素通过哈希函数映射到哈希表的不同索引里</p><p>通过取模来保证不超过哈希表索引</p><p>如果不同元素映射到同一个索引，那么发生哈希碰撞</p><h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>两种解决方法：<strong>拉链法</strong>、<strong>线性探测法</strong></p><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p>以索引为链表头创建链表，后来的依次排到链表后面</p><p><u>拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间</u></p><h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h3><p>保证tableSize&gt;dataSize(总数据量)</p><p>依次查找哈希表中的空位</p><h2 id="常见三种哈希结构（Java）"><a href="#常见三种哈希结构（Java）" class="headerlink" title="常见三种哈希结构（Java）"></a>常见三种哈希结构（Java）</h2><p>何时选择数组：限制了数值大小（数据量？）</p><p>数值大小没有限制：选择集合</p><h3 id="数组Arrays"><a href="#数组Arrays" class="headerlink" title="数组Arrays"></a>数组Arrays</h3><h3 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h3><p>使用unordered_set 读写效率是最高的，并不需要对数据进行排序，而且还不要让数据重复</p><p>那有同学可能问了，遇到哈希问题我直接都用set不就得了，用什么数组啊。</p><p>直接使用set 不仅占用空间比数组大，而且速度要比数组慢，set把数值映射到key上都要做hash计算的。</p><p>不要小瞧 这个耗时，在数据量大的情况，差距是很明显的。</p><h3 id="映射Map"><a href="#映射Map" class="headerlink" title="映射Map"></a>映射Map</h3><h1 id="java的Set和Map各有三个实现类"><a href="#java的Set和Map各有三个实现类" class="headerlink" title="java的Set和Map各有三个实现类"></a>java的Set和Map各有三个实现类</h1><p>Set：HashSet、LinkedHashSet、TreeSet</p><p>Map：HashMap、LinkedHashMap、TreeMap</p><p>区别：</p><p>Set：</p><table><thead><tr><th align="left"></th><th>基于</th><th>性能</th><th>特点</th><th>使用场景</th></tr></thead><tbody><tr><td align="left">HashSet</td><td>哈希表</td><td>**O(1)**时间复杂度的插入、删除和查找操作</td><td>元素顺序可能会随插入顺序的变化而变化</td><td>当不关心元素顺序，仅需要快速访问元素时</td></tr><tr><td align="left">LinkedHashSet</td><td>哈希表和链表</td><td>相比<code>HashSet</code>略微增加了内存开销，插入、删除和查找操作仍然是**O(1)**时间复杂度</td><td>保留元素的插入顺序</td><td>需要快速访问元素，同时保留插入顺序时</td></tr><tr><td align="left">TreeSet</td><td>红黑树（平衡二叉树）</td><td>**O(log n)**时间复杂度的插入、删除和查找操作</td><td>保证元素的排序，可以自定义顺序（因为是红黑树，可以前序中序后序）</td><td>需要对元素进行排序，且允许一定的性能开销时</td></tr><tr><td align="left"></td><td></td><td></td><td></td><td></td></tr><tr><td align="left">共同点</td><td>元素通过<code>add</code>方法添加，删除用<code>remove</code>，查找用<code>contains</code></td><td>Set<Integer> set &#x3D; new HashSet&lt;&gt;();</td><td>不允许重复元素</td><td></td></tr></tbody></table><p>Map：</p><table><thead><tr><th align="left"></th><th>基于</th><th>性能</th><th>特点</th><th>使用场景</th></tr></thead><tbody><tr><td align="left">HashMap</td><td>哈希表</td><td>**O(1)**时间复杂度的插入、删除和查找操作</td><td>键值对的顺序可能会随插入顺序的变化而变化</td><td>当不关心键值对顺序，仅需要快速访问键值对时</td></tr><tr><td align="left">LinkedHashMap</td><td>哈希表和链表</td><td>相比<code>HashSMap</code>略微增加了内存开销，插入、删除和查找操作仍然是**O(1)**时间复杂度</td><td>保留键值对的插入顺序或<code>最近访问顺序</code></td><td>需要快速访问键值对，同时保留插入顺序时</td></tr><tr><td align="left">TreeMap</td><td>红黑树</td><td>**O(log n)**时间复杂度的插入、删除和查找操作</td><td>保证键值对的排序,可以自定义排序（因为是红黑树，可以前序中序后序）</td><td>需要对键值对进行排序，且允许一定的性能开销时</td></tr><tr><td align="left"></td><td></td><td></td><td></td><td></td></tr><tr><td align="left">共同点</td><td>键值对通过<code>put</code>方法添加，删除用<code>remove</code>，查找用<code>get</code>和<code>containsKey</code></td><td>Map&lt;Integer, String&gt; map &#x3D; new HashMap&lt;&gt;();</td><td>键唯一，不允许重复</td><td></td></tr></tbody></table><p><u><strong>C++中的Set和Map各有multi和unordered_：</strong></u></p><p>multi可允许重复</p><p>unordered为无序（为什么要用？：需要键值对，但是不需要有序，因此无序更便捷）</p><img src="/2024/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.png" class="">]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
